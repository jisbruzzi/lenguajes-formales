(setq mat '((1 2 3 a) (4 5 6 b ) (7 8 9 c) (a b c d) ))
(defun iota (n)
  (if (eq n 1)
    '(1)
    (append (iota (- n 1)) (list n) )
  )
)
(defun cerarPosiciones (i F)
  (mapcar 
    (lambda (j v) (if (< j i) 0 v))
    (iota (length F)) 
    F
  )
)
(defun triangularDerecha (M)
  (mapcar 'cerarPosiciones (iota (length M)) M)
)
;(print (triangularDerecha mat))

(defun combiEL (E L)
  (if (null L)
    nil
    (cons (list E (car L)) (combiEL E (cdr L)))
  )
)


(defun combi (L)
  (if (eq (length L) 2)
    (list L)
    (append (combiEL (car L) (cdr L)) (combi (cdr L) ) )
  )
)
;(print (combi '(1 2 3 4 5 6)))
(defun filaAColumna (F)
  (mapcar 'list F)
)
(print (filaAColumna '(1 2 3 4 5)))
(defun agregarColumnaAMatriz (M C)
  (mapcar 'append M C)
)
(defun trans (M)
  (reduce 'agregarColumnaAMatriz (mapcar 'filaAColumna M))
)
(print (trans '((1 2 3) (4 5 6))))
(print (trans '((1 2 3) (4 5 6) (7 8 9) (a b c) (d e f))))
(print (trans '((1 2 3) (4 5 6))))
(print (trans '((1 2 3) (4 5 6))))
